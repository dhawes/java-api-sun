call javaapi#namespace('sun.awt.geom')

call javaapi#class('1', 'Comparator', [
  \ javaapi#method(0,'compare(', 'Object, Object)', 'int'),
  \ ])

call javaapi#class('AddOp', 'CAGOp', [
  \ javaapi#method(0,'AddOp(', ')', 'public'),
  \ javaapi#method(0,'newClassification(', 'boolean, boolean)', 'boolean'),
  \ ])

call javaapi#class('CAGOp', 'AreaOp', [
  \ javaapi#method(0,'CAGOp(', ')', 'public'),
  \ javaapi#method(0,'newRow(', ')', 'void'),
  \ javaapi#method(0,'classify(', 'Edge)', 'int'),
  \ javaapi#method(0,'getState(', ')', 'int'),
  \ javaapi#method(0,'newClassification(', 'boolean, boolean)', 'boolean'),
  \ ])

call javaapi#class('EOWindOp', 'AreaOp', [
  \ javaapi#method(0,'EOWindOp(', ')', 'public'),
  \ javaapi#method(0,'newRow(', ')', 'void'),
  \ javaapi#method(0,'classify(', 'Edge)', 'int'),
  \ javaapi#method(0,'getState(', ')', 'int'),
  \ ])

call javaapi#class('IntOp', 'CAGOp', [
  \ javaapi#method(0,'IntOp(', ')', 'public'),
  \ javaapi#method(0,'newClassification(', 'boolean, boolean)', 'boolean'),
  \ ])

call javaapi#class('NZWindOp', 'AreaOp', [
  \ javaapi#method(0,'NZWindOp(', ')', 'public'),
  \ javaapi#method(0,'newRow(', ')', 'void'),
  \ javaapi#method(0,'classify(', 'Edge)', 'int'),
  \ javaapi#method(0,'getState(', ')', 'int'),
  \ ])

call javaapi#class('SubOp', 'CAGOp', [
  \ javaapi#method(0,'SubOp(', ')', 'public'),
  \ javaapi#method(0,'newClassification(', 'boolean, boolean)', 'boolean'),
  \ ])

call javaapi#class('XorOp', 'CAGOp', [
  \ javaapi#method(0,'XorOp(', ')', 'public'),
  \ javaapi#method(0,'newClassification(', 'boolean, boolean)', 'boolean'),
  \ ])

call javaapi#class('AreaOp', '', [
  \ javaapi#field(1,'CTAG_LEFT', 'int'),
  \ javaapi#field(1,'CTAG_RIGHT', 'int'),
  \ javaapi#field(1,'ETAG_IGNORE', 'int'),
  \ javaapi#field(1,'ETAG_ENTER', 'int'),
  \ javaapi#field(1,'ETAG_EXIT', 'int'),
  \ javaapi#field(1,'RSTAG_INSIDE', 'int'),
  \ javaapi#field(1,'RSTAG_OUTSIDE', 'int'),
  \ javaapi#method(0,'newRow(', ')', 'void'),
  \ javaapi#method(0,'classify(', 'Edge)', 'int'),
  \ javaapi#method(0,'getState(', ')', 'int'),
  \ javaapi#method(0,'calculate(', 'Vector, Vector)', 'Vector'),
  \ javaapi#method(1,'finalizeSubCurves(', 'Vector, Vector)', 'void'),
  \ javaapi#method(1,'resolveLinks(', 'Vector, Vector, Vector)', 'void'),
  \ javaapi#method(1,'obstructs(', 'double, double, int)', 'boolean'),
  \ ])

call javaapi#class('ChainEnd', '', [
  \ javaapi#method(0,'ChainEnd(', 'CurveLink, ChainEnd)', 'public'),
  \ javaapi#method(0,'getChain(', ')', 'CurveLink'),
  \ javaapi#method(0,'setOtherEnd(', 'ChainEnd)', 'void'),
  \ javaapi#method(0,'getPartner(', ')', 'ChainEnd'),
  \ javaapi#method(0,'linkTo(', 'ChainEnd)', 'CurveLink'),
  \ javaapi#method(0,'addLink(', 'CurveLink)', 'void'),
  \ javaapi#method(0,'getX(', ')', 'double'),
  \ ])

call javaapi#class('EvenOdd', 'Crossings', [
  \ javaapi#method(0,'EvenOdd(', 'double, double, double, double)', 'public'),
  \ javaapi#method(0,'covers(', 'double, double)', 'boolean'),
  \ javaapi#method(0,'record(', 'double, double, int)', 'void'),
  \ ])

call javaapi#class('NonZero', 'Crossings', [
  \ javaapi#method(0,'NonZero(', 'double, double, double, double)', 'public'),
  \ javaapi#method(0,'covers(', 'double, double)', 'boolean'),
  \ javaapi#method(0,'remove(', 'int)', 'void'),
  \ javaapi#method(0,'insert(', 'int, double, double, int)', 'void'),
  \ javaapi#method(0,'record(', 'double, double, int)', 'void'),
  \ ])

call javaapi#class('Crossings', '', [
  \ javaapi#field(1,'debug', 'boolean'),
  \ javaapi#method(0,'Crossings(', 'double, double, double, double)', 'public'),
  \ javaapi#method(0,'getXLo(', ')', 'double'),
  \ javaapi#method(0,'getYLo(', ')', 'double'),
  \ javaapi#method(0,'getXHi(', ')', 'double'),
  \ javaapi#method(0,'getYHi(', ')', 'double'),
  \ javaapi#method(0,'record(', 'double, double, int)', 'void'),
  \ javaapi#method(0,'print(', ')', 'void'),
  \ javaapi#method(0,'isEmpty(', ')', 'boolean'),
  \ javaapi#method(0,'covers(', 'double, double)', 'boolean'),
  \ javaapi#method(1,'findCrossings(', 'Vector, double, double, double, double)', 'Crossings'),
  \ javaapi#method(1,'findCrossings(', 'PathIterator, double, double, double, double)', 'Crossings'),
  \ javaapi#method(0,'accumulateLine(', 'double, double, double, double)', 'boolean'),
  \ javaapi#method(0,'accumulateLine(', 'double, double, double, double, int)', 'boolean'),
  \ javaapi#method(0,'accumulateQuad(', 'double, double, double[])', 'boolean'),
  \ javaapi#method(0,'accumulateCubic(', 'double, double, double[])', 'boolean'),
  \ ])

call javaapi#class('Curve', '', [
  \ javaapi#field(1,'INCREASING', 'int'),
  \ javaapi#field(1,'DECREASING', 'int'),
  \ javaapi#field(1,'RECT_INTERSECTS', 'int'),
  \ javaapi#field(1,'TMIN', 'double'),
  \ javaapi#method(1,'insertMove(', 'Vector, double, double)', 'void'),
  \ javaapi#method(1,'insertLine(', 'Vector, double, double, double, double)', 'void'),
  \ javaapi#method(1,'insertQuad(', 'Vector, double, double, double[])', 'void'),
  \ javaapi#method(1,'insertCubic(', 'Vector, double, double, double[])', 'void'),
  \ javaapi#method(1,'pointCrossingsForPath(', 'PathIterator, double, double)', 'int'),
  \ javaapi#method(1,'pointCrossingsForLine(', 'double, double, double, double, double, double)', 'int'),
  \ javaapi#method(1,'pointCrossingsForQuad(', 'double, double, double, double, double, double, double, double, int)', 'int'),
  \ javaapi#method(1,'pointCrossingsForCubic(', 'double, double, double, double, double, double, double, double, double, double, int)', 'int'),
  \ javaapi#method(1,'rectCrossingsForPath(', 'PathIterator, double, double, double, double)', 'int'),
  \ javaapi#method(1,'rectCrossingsForLine(', 'int, double, double, double, double, double, double, double, double)', 'int'),
  \ javaapi#method(1,'rectCrossingsForQuad(', 'int, double, double, double, double, double, double, double, double, double, double, int)', 'int'),
  \ javaapi#method(1,'rectCrossingsForCubic(', 'int, double, double, double, double, double, double, double, double, double, double, double, double, int)', 'int'),
  \ javaapi#method(0,'Curve(', 'int)', 'public'),
  \ javaapi#method(0,'getDirection(', ')', 'int'),
  \ javaapi#method(0,'getWithDirection(', 'int)', 'Curve'),
  \ javaapi#method(1,'round(', 'double)', 'double'),
  \ javaapi#method(1,'orderof(', 'double, double)', 'int'),
  \ javaapi#method(1,'signeddiffbits(', 'double, double)', 'long'),
  \ javaapi#method(1,'diffbits(', 'double, double)', 'long'),
  \ javaapi#method(1,'prev(', 'double)', 'double'),
  \ javaapi#method(1,'next(', 'double)', 'double'),
  \ javaapi#method(0,'toString(', ')', 'String'),
  \ javaapi#method(0,'controlPointString(', ')', 'String'),
  \ javaapi#method(0,'getOrder(', ')', 'int'),
  \ javaapi#method(0,'getXTop(', ')', 'double'),
  \ javaapi#method(0,'getYTop(', ')', 'double'),
  \ javaapi#method(0,'getXBot(', ')', 'double'),
  \ javaapi#method(0,'getYBot(', ')', 'double'),
  \ javaapi#method(0,'getXMin(', ')', 'double'),
  \ javaapi#method(0,'getXMax(', ')', 'double'),
  \ javaapi#method(0,'getX0(', ')', 'double'),
  \ javaapi#method(0,'getY0(', ')', 'double'),
  \ javaapi#method(0,'getX1(', ')', 'double'),
  \ javaapi#method(0,'getY1(', ')', 'double'),
  \ javaapi#method(0,'XforY(', 'double)', 'double'),
  \ javaapi#method(0,'TforY(', 'double)', 'double'),
  \ javaapi#method(0,'XforT(', 'double)', 'double'),
  \ javaapi#method(0,'YforT(', 'double)', 'double'),
  \ javaapi#method(0,'dXforT(', 'double, int)', 'double'),
  \ javaapi#method(0,'dYforT(', 'double, int)', 'double'),
  \ javaapi#method(0,'nextVertical(', 'double, double)', 'double'),
  \ javaapi#method(0,'crossingsFor(', 'double, double)', 'int'),
  \ javaapi#method(0,'accumulateCrossings(', 'Crossings)', 'boolean'),
  \ javaapi#method(0,'enlarge(', 'Rectangle2D)', 'void'),
  \ javaapi#method(0,'getSubCurve(', 'double, double)', 'Curve'),
  \ javaapi#method(0,'getReversedCurve(', ')', 'Curve'),
  \ javaapi#method(0,'getSubCurve(', 'double, double, int)', 'Curve'),
  \ javaapi#method(0,'compareTo(', 'Curve, double[])', 'int'),
  \ javaapi#method(0,'findIntersect(', 'Curve, double[], double, int, int, double, double, double, double, double, double, double, double, double, double, double, double)', 'boolean'),
  \ javaapi#method(0,'refineTforY(', 'double, double, double)', 'double'),
  \ javaapi#method(0,'fairlyClose(', 'double, double)', 'boolean'),
  \ javaapi#method(0,'getSegment(', 'double[])', 'int'),
  \ ])

call javaapi#class('CurveLink', '', [
  \ javaapi#method(0,'CurveLink(', 'Curve, double, double, int)', 'public'),
  \ javaapi#method(0,'absorb(', 'CurveLink)', 'boolean'),
  \ javaapi#method(0,'absorb(', 'Curve, double, double, int)', 'boolean'),
  \ javaapi#method(0,'isEmpty(', ')', 'boolean'),
  \ javaapi#method(0,'getCurve(', ')', 'Curve'),
  \ javaapi#method(0,'getSubCurve(', ')', 'Curve'),
  \ javaapi#method(0,'getMoveto(', ')', 'Curve'),
  \ javaapi#method(0,'getXTop(', ')', 'double'),
  \ javaapi#method(0,'getYTop(', ')', 'double'),
  \ javaapi#method(0,'getXBot(', ')', 'double'),
  \ javaapi#method(0,'getYBot(', ')', 'double'),
  \ javaapi#method(0,'getX(', ')', 'double'),
  \ javaapi#method(0,'getEdgeTag(', ')', 'int'),
  \ javaapi#method(0,'setNext(', 'CurveLink)', 'void'),
  \ javaapi#method(0,'getNext(', ')', 'CurveLink'),
  \ ])

call javaapi#class('Edge', '', [
  \ javaapi#method(0,'Edge(', 'Curve, int)', 'public'),
  \ javaapi#method(0,'Edge(', 'Curve, int, int)', 'public'),
  \ javaapi#method(0,'getCurve(', ')', 'Curve'),
  \ javaapi#method(0,'getCurveTag(', ')', 'int'),
  \ javaapi#method(0,'getEdgeTag(', ')', 'int'),
  \ javaapi#method(0,'setEdgeTag(', 'int)', 'void'),
  \ javaapi#method(0,'getEquivalence(', ')', 'int'),
  \ javaapi#method(0,'setEquivalence(', 'int)', 'void'),
  \ javaapi#method(0,'compareTo(', 'Edge, double[])', 'int'),
  \ javaapi#method(0,'record(', 'double, int)', 'void'),
  \ javaapi#method(0,'isActiveFor(', 'double, int)', 'boolean'),
  \ javaapi#method(0,'toString(', ')', 'String'),
  \ ])

call javaapi#class('Order0', 'Curve', [
  \ javaapi#method(0,'Order0(', 'double, double)', 'public'),
  \ javaapi#method(0,'getOrder(', ')', 'int'),
  \ javaapi#method(0,'getXTop(', ')', 'double'),
  \ javaapi#method(0,'getYTop(', ')', 'double'),
  \ javaapi#method(0,'getXBot(', ')', 'double'),
  \ javaapi#method(0,'getYBot(', ')', 'double'),
  \ javaapi#method(0,'getXMin(', ')', 'double'),
  \ javaapi#method(0,'getXMax(', ')', 'double'),
  \ javaapi#method(0,'getX0(', ')', 'double'),
  \ javaapi#method(0,'getY0(', ')', 'double'),
  \ javaapi#method(0,'getX1(', ')', 'double'),
  \ javaapi#method(0,'getY1(', ')', 'double'),
  \ javaapi#method(0,'XforY(', 'double)', 'double'),
  \ javaapi#method(0,'TforY(', 'double)', 'double'),
  \ javaapi#method(0,'XforT(', 'double)', 'double'),
  \ javaapi#method(0,'YforT(', 'double)', 'double'),
  \ javaapi#method(0,'dXforT(', 'double, int)', 'double'),
  \ javaapi#method(0,'dYforT(', 'double, int)', 'double'),
  \ javaapi#method(0,'nextVertical(', 'double, double)', 'double'),
  \ javaapi#method(0,'crossingsFor(', 'double, double)', 'int'),
  \ javaapi#method(0,'accumulateCrossings(', 'Crossings)', 'boolean'),
  \ javaapi#method(0,'enlarge(', 'Rectangle2D)', 'void'),
  \ javaapi#method(0,'getSubCurve(', 'double, double, int)', 'Curve'),
  \ javaapi#method(0,'getReversedCurve(', ')', 'Curve'),
  \ javaapi#method(0,'getSegment(', 'double[])', 'int'),
  \ ])

call javaapi#class('Order1', 'Curve', [
  \ javaapi#method(0,'Order1(', 'double, double, double, double, int)', 'public'),
  \ javaapi#method(0,'getOrder(', ')', 'int'),
  \ javaapi#method(0,'getXTop(', ')', 'double'),
  \ javaapi#method(0,'getYTop(', ')', 'double'),
  \ javaapi#method(0,'getXBot(', ')', 'double'),
  \ javaapi#method(0,'getYBot(', ')', 'double'),
  \ javaapi#method(0,'getXMin(', ')', 'double'),
  \ javaapi#method(0,'getXMax(', ')', 'double'),
  \ javaapi#method(0,'getX0(', ')', 'double'),
  \ javaapi#method(0,'getY0(', ')', 'double'),
  \ javaapi#method(0,'getX1(', ')', 'double'),
  \ javaapi#method(0,'getY1(', ')', 'double'),
  \ javaapi#method(0,'XforY(', 'double)', 'double'),
  \ javaapi#method(0,'TforY(', 'double)', 'double'),
  \ javaapi#method(0,'XforT(', 'double)', 'double'),
  \ javaapi#method(0,'YforT(', 'double)', 'double'),
  \ javaapi#method(0,'dXforT(', 'double, int)', 'double'),
  \ javaapi#method(0,'dYforT(', 'double, int)', 'double'),
  \ javaapi#method(0,'nextVertical(', 'double, double)', 'double'),
  \ javaapi#method(0,'accumulateCrossings(', 'Crossings)', 'boolean'),
  \ javaapi#method(0,'enlarge(', 'Rectangle2D)', 'void'),
  \ javaapi#method(0,'getSubCurve(', 'double, double, int)', 'Curve'),
  \ javaapi#method(0,'getReversedCurve(', ')', 'Curve'),
  \ javaapi#method(0,'compareTo(', 'Curve, double[])', 'int'),
  \ javaapi#method(0,'getSegment(', 'double[])', 'int'),
  \ ])

call javaapi#class('Order2', 'Curve', [
  \ javaapi#method(1,'insert(', 'Vector, double[], double, double, double, double, double, double, int)', 'void'),
  \ javaapi#method(1,'addInstance(', 'Vector, double, double, double, double, double, double, int)', 'void'),
  \ javaapi#method(1,'getHorizontalParams(', 'double, double, double, double[])', 'int'),
  \ javaapi#method(1,'split(', 'double[], int, double)', 'void'),
  \ javaapi#method(0,'Order2(', 'double, double, double, double, double, double, int)', 'public'),
  \ javaapi#method(0,'getOrder(', ')', 'int'),
  \ javaapi#method(0,'getXTop(', ')', 'double'),
  \ javaapi#method(0,'getYTop(', ')', 'double'),
  \ javaapi#method(0,'getXBot(', ')', 'double'),
  \ javaapi#method(0,'getYBot(', ')', 'double'),
  \ javaapi#method(0,'getXMin(', ')', 'double'),
  \ javaapi#method(0,'getXMax(', ')', 'double'),
  \ javaapi#method(0,'getX0(', ')', 'double'),
  \ javaapi#method(0,'getY0(', ')', 'double'),
  \ javaapi#method(0,'getCX0(', ')', 'double'),
  \ javaapi#method(0,'getCY0(', ')', 'double'),
  \ javaapi#method(0,'getX1(', ')', 'double'),
  \ javaapi#method(0,'getY1(', ')', 'double'),
  \ javaapi#method(0,'XforY(', 'double)', 'double'),
  \ javaapi#method(0,'TforY(', 'double)', 'double'),
  \ javaapi#method(1,'TforY(', 'double, double, double, double)', 'double'),
  \ javaapi#method(0,'XforT(', 'double)', 'double'),
  \ javaapi#method(0,'YforT(', 'double)', 'double'),
  \ javaapi#method(0,'dXforT(', 'double, int)', 'double'),
  \ javaapi#method(0,'dYforT(', 'double, int)', 'double'),
  \ javaapi#method(0,'nextVertical(', 'double, double)', 'double'),
  \ javaapi#method(0,'enlarge(', 'Rectangle2D)', 'void'),
  \ javaapi#method(0,'getSubCurve(', 'double, double, int)', 'Curve'),
  \ javaapi#method(0,'getReversedCurve(', ')', 'Curve'),
  \ javaapi#method(0,'getSegment(', 'double[])', 'int'),
  \ javaapi#method(0,'controlPointString(', ')', 'String'),
  \ ])

call javaapi#class('Order3', 'Curve', [
  \ javaapi#method(1,'insert(', 'Vector, double[], double, double, double, double, double, double, double, double, int)', 'void'),
  \ javaapi#method(1,'addInstance(', 'Vector, double, double, double, double, double, double, double, double, int)', 'void'),
  \ javaapi#method(1,'getHorizontalParams(', 'double, double, double, double, double[])', 'int'),
  \ javaapi#method(1,'split(', 'double[], int, double)', 'void'),
  \ javaapi#method(0,'Order3(', 'double, double, double, double, double, double, double, double, int)', 'public'),
  \ javaapi#method(0,'getOrder(', ')', 'int'),
  \ javaapi#method(0,'getXTop(', ')', 'double'),
  \ javaapi#method(0,'getYTop(', ')', 'double'),
  \ javaapi#method(0,'getXBot(', ')', 'double'),
  \ javaapi#method(0,'getYBot(', ')', 'double'),
  \ javaapi#method(0,'getXMin(', ')', 'double'),
  \ javaapi#method(0,'getXMax(', ')', 'double'),
  \ javaapi#method(0,'getX0(', ')', 'double'),
  \ javaapi#method(0,'getY0(', ')', 'double'),
  \ javaapi#method(0,'getCX0(', ')', 'double'),
  \ javaapi#method(0,'getCY0(', ')', 'double'),
  \ javaapi#method(0,'getCX1(', ')', 'double'),
  \ javaapi#method(0,'getCY1(', ')', 'double'),
  \ javaapi#method(0,'getX1(', ')', 'double'),
  \ javaapi#method(0,'getY1(', ')', 'double'),
  \ javaapi#method(0,'TforY(', 'double)', 'double'),
  \ javaapi#method(0,'refine(', 'double, double, double, double, double)', 'double'),
  \ javaapi#method(0,'XforY(', 'double)', 'double'),
  \ javaapi#method(0,'XforT(', 'double)', 'double'),
  \ javaapi#method(0,'YforT(', 'double)', 'double'),
  \ javaapi#method(0,'dXforT(', 'double, int)', 'double'),
  \ javaapi#method(0,'dYforT(', 'double, int)', 'double'),
  \ javaapi#method(0,'nextVertical(', 'double, double)', 'double'),
  \ javaapi#method(0,'enlarge(', 'Rectangle2D)', 'void'),
  \ javaapi#method(0,'getSubCurve(', 'double, double, int)', 'Curve'),
  \ javaapi#method(0,'getReversedCurve(', ')', 'Curve'),
  \ javaapi#method(0,'getSegment(', 'double[])', 'int'),
  \ javaapi#method(0,'controlPointString(', ')', 'String'),
  \ ])

call javaapi#interface('PathConsumer2D', '', [
  \ javaapi#method(0,'moveTo(', 'float, float)', 'void'),
  \ javaapi#method(0,'lineTo(', 'float, float)', 'void'),
  \ javaapi#method(0,'quadTo(', 'float, float, float, float)', 'void'),
  \ javaapi#method(0,'curveTo(', 'float, float, float, float, float, float)', 'void'),
  \ javaapi#method(0,'closePath(', ')', 'void'),
  \ javaapi#method(0,'pathDone(', ')', 'void'),
  \ javaapi#method(0,'getNativeConsumer(', ')', 'long'),
  \ ])

