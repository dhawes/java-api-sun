call javaapi#namespace('com.sun.org.apache.xpath.internal')

call javaapi#class('Arg', '', [
  \ javaapi#method(0,'getQName(', ')', 'QName'),
  \ javaapi#method(0,'setQName(', 'QName)', 'void'),
  \ javaapi#method(0,'getVal(', ')', 'XObject'),
  \ javaapi#method(0,'setVal(', 'XObject)', 'void'),
  \ javaapi#method(0,'detach(', ')', 'void'),
  \ javaapi#method(0,'getExpression(', ')', 'String'),
  \ javaapi#method(0,'setExpression(', 'String)', 'void'),
  \ javaapi#method(0,'isFromWithParam(', ')', 'boolean'),
  \ javaapi#method(0,'isVisible(', ')', 'boolean'),
  \ javaapi#method(0,'setIsVisible(', 'boolean)', 'void'),
  \ javaapi#method(0,'Arg(', ')', 'public'),
  \ javaapi#method(0,'Arg(', 'QName, String, boolean)', 'public'),
  \ javaapi#method(0,'Arg(', 'QName, XObject)', 'public'),
  \ javaapi#method(0,'equals(', 'Object)', 'boolean'),
  \ javaapi#method(0,'Arg(', 'QName, XObject, boolean)', 'public'),
  \ ])

call javaapi#class('CachedXPathAPI', '', [
  \ javaapi#method(0,'CachedXPathAPI(', ')', 'public'),
  \ javaapi#method(0,'CachedXPathAPI(', 'CachedXPathAPI)', 'public'),
  \ javaapi#method(0,'getXPathContext(', ')', 'XPathContext'),
  \ javaapi#method(0,'selectSingleNode(', 'Node, String) throws TransformerException', 'Node'),
  \ javaapi#method(0,'selectSingleNode(', 'Node, String, Node) throws TransformerException', 'Node'),
  \ javaapi#method(0,'selectNodeIterator(', 'Node, String) throws TransformerException', 'NodeIterator'),
  \ javaapi#method(0,'selectNodeIterator(', 'Node, String, Node) throws TransformerException', 'NodeIterator'),
  \ javaapi#method(0,'selectNodeList(', 'Node, String) throws TransformerException', 'NodeList'),
  \ javaapi#method(0,'selectNodeList(', 'Node, String, Node) throws TransformerException', 'NodeList'),
  \ javaapi#method(0,'eval(', 'Node, String) throws TransformerException', 'XObject'),
  \ javaapi#method(0,'eval(', 'Node, String, Node) throws TransformerException', 'XObject'),
  \ javaapi#method(0,'eval(', 'Node, String, PrefixResolver) throws TransformerException', 'XObject'),
  \ ])

call javaapi#class('Expression', 'XPathVisitable', [
  \ javaapi#method(0,'Expression(', ')', 'public'),
  \ javaapi#method(0,'canTraverseOutsideSubtree(', ')', 'boolean'),
  \ javaapi#method(0,'execute(', 'XPathContext, int) throws TransformerException', 'XObject'),
  \ javaapi#method(0,'execute(', 'XPathContext, int, DTM, int) throws TransformerException', 'XObject'),
  \ javaapi#method(0,'execute(', 'XPathContext) throws TransformerException', 'XObject'),
  \ javaapi#method(0,'execute(', 'XPathContext, boolean) throws TransformerException', 'XObject'),
  \ javaapi#method(0,'num(', 'XPathContext) throws TransformerException', 'double'),
  \ javaapi#method(0,'bool(', 'XPathContext) throws TransformerException', 'boolean'),
  \ javaapi#method(0,'xstr(', 'XPathContext) throws TransformerException', 'XMLString'),
  \ javaapi#method(0,'isNodesetExpr(', ')', 'boolean'),
  \ javaapi#method(0,'asNode(', 'XPathContext) throws TransformerException', 'int'),
  \ javaapi#method(0,'asIterator(', 'XPathContext, int) throws TransformerException', 'DTMIterator'),
  \ javaapi#method(0,'asIteratorRaw(', 'XPathContext, int) throws TransformerException', 'DTMIterator'),
  \ javaapi#method(0,'executeCharsToContentHandler(', 'XPathContext, ContentHandler) throws TransformerException, SAXException', 'void'),
  \ javaapi#method(0,'isStableNumber(', ')', 'boolean'),
  \ javaapi#method(0,'fixupVariables(', 'Vector, int)', 'void'),
  \ javaapi#method(0,'deepEquals(', 'Expression)', 'boolean'),
  \ javaapi#method(0,'warn(', 'XPathContext, String, Object[]) throws TransformerException', 'void'),
  \ javaapi#method(0,'assertion(', 'boolean, String)', 'void'),
  \ javaapi#method(0,'error(', 'XPathContext, String, Object[]) throws TransformerException', 'void'),
  \ javaapi#method(0,'getExpressionOwner(', ')', 'ExpressionNode'),
  \ javaapi#method(0,'exprSetParent(', 'ExpressionNode)', 'void'),
  \ javaapi#method(0,'exprGetParent(', ')', 'ExpressionNode'),
  \ javaapi#method(0,'exprAddChild(', 'ExpressionNode, int)', 'void'),
  \ javaapi#method(0,'exprGetChild(', 'int)', 'ExpressionNode'),
  \ javaapi#method(0,'exprGetNumChildren(', ')', 'int'),
  \ javaapi#method(0,'getPublicId(', ')', 'String'),
  \ javaapi#method(0,'getSystemId(', ')', 'String'),
  \ javaapi#method(0,'getLineNumber(', ')', 'int'),
  \ javaapi#method(0,'getColumnNumber(', ')', 'int'),
  \ ])

call javaapi#interface('ExpressionNode', '', [
  \ javaapi#method(0,'exprSetParent(', 'ExpressionNode)', 'void'),
  \ javaapi#method(0,'exprGetParent(', ')', 'ExpressionNode'),
  \ javaapi#method(0,'exprAddChild(', 'ExpressionNode, int)', 'void'),
  \ javaapi#method(0,'exprGetChild(', 'int)', 'ExpressionNode'),
  \ javaapi#method(0,'exprGetNumChildren(', ')', 'int'),
  \ ])

call javaapi#interface('ExpressionOwner', '', [
  \ javaapi#method(0,'getExpression(', ')', 'Expression'),
  \ javaapi#method(0,'setExpression(', 'Expression)', 'void'),
  \ ])

call javaapi#interface('ExtensionsProvider', '', [
  \ javaapi#method(0,'functionAvailable(', 'String, String) throws TransformerException', 'boolean'),
  \ javaapi#method(0,'elementAvailable(', 'String, String) throws TransformerException', 'boolean'),
  \ javaapi#method(0,'extFunction(', 'String, String, Vector, Object) throws TransformerException', 'Object'),
  \ javaapi#method(0,'extFunction(', 'FuncExtFunction, Vector) throws TransformerException', 'Object'),
  \ ])

call javaapi#class('FoundIndex', '', [
  \ javaapi#method(0,'FoundIndex(', ')', 'public'),
  \ ])

call javaapi#class('NodeSet', 'ContextNodeList', [
  \ javaapi#method(0,'NodeSet(', ')', 'public'),
  \ javaapi#method(0,'NodeSet(', 'int)', 'public'),
  \ javaapi#method(0,'NodeSet(', 'NodeList)', 'public'),
  \ javaapi#method(0,'NodeSet(', 'NodeSet)', 'public'),
  \ javaapi#method(0,'NodeSet(', 'NodeIterator)', 'public'),
  \ javaapi#method(0,'NodeSet(', 'Node)', 'public'),
  \ javaapi#method(0,'getRoot(', ')', 'Node'),
  \ javaapi#method(0,'cloneWithReset(', ') throws CloneNotSupportedException', 'NodeIterator'),
  \ javaapi#method(0,'reset(', ')', 'void'),
  \ javaapi#method(0,'getWhatToShow(', ')', 'int'),
  \ javaapi#method(0,'getFilter(', ')', 'NodeFilter'),
  \ javaapi#method(0,'getExpandEntityReferences(', ')', 'boolean'),
  \ javaapi#method(0,'nextNode(', ') throws DOMException', 'Node'),
  \ javaapi#method(0,'previousNode(', ') throws DOMException', 'Node'),
  \ javaapi#method(0,'detach(', ')', 'void'),
  \ javaapi#method(0,'isFresh(', ')', 'boolean'),
  \ javaapi#method(0,'runTo(', 'int)', 'void'),
  \ javaapi#method(0,'item(', 'int)', 'Node'),
  \ javaapi#method(0,'getLength(', ')', 'int'),
  \ javaapi#method(0,'addNode(', 'Node)', 'void'),
  \ javaapi#method(0,'insertNode(', 'Node, int)', 'void'),
  \ javaapi#method(0,'removeNode(', 'Node)', 'void'),
  \ javaapi#method(0,'addNodes(', 'NodeList)', 'void'),
  \ javaapi#method(0,'addNodes(', 'NodeSet)', 'void'),
  \ javaapi#method(0,'addNodes(', 'NodeIterator)', 'void'),
  \ javaapi#method(0,'addNodesInDocOrder(', 'NodeList, XPathContext)', 'void'),
  \ javaapi#method(0,'addNodesInDocOrder(', 'NodeIterator, XPathContext)', 'void'),
  \ javaapi#method(0,'addNodeInDocOrder(', 'Node, boolean, XPathContext)', 'int'),
  \ javaapi#method(0,'addNodeInDocOrder(', 'Node, XPathContext)', 'int'),
  \ javaapi#method(0,'getCurrentPos(', ')', 'int'),
  \ javaapi#method(0,'setCurrentPos(', 'int)', 'void'),
  \ javaapi#method(0,'getCurrentNode(', ')', 'Node'),
  \ javaapi#method(0,'getShouldCacheNodes(', ')', 'boolean'),
  \ javaapi#method(0,'setShouldCacheNodes(', 'boolean)', 'void'),
  \ javaapi#method(0,'getLast(', ')', 'int'),
  \ javaapi#method(0,'setLast(', 'int)', 'void'),
  \ javaapi#method(0,'clone(', ') throws CloneNotSupportedException', 'Object'),
  \ javaapi#method(0,'size(', ')', 'int'),
  \ javaapi#method(0,'addElement(', 'Node)', 'void'),
  \ javaapi#method(0,'push(', 'Node)', 'void'),
  \ javaapi#method(0,'pop(', ')', 'Node'),
  \ javaapi#method(0,'popAndTop(', ')', 'Node'),
  \ javaapi#method(0,'popQuick(', ')', 'void'),
  \ javaapi#method(0,'peepOrNull(', ')', 'Node'),
  \ javaapi#method(0,'pushPair(', 'Node, Node)', 'void'),
  \ javaapi#method(0,'popPair(', ')', 'void'),
  \ javaapi#method(0,'setTail(', 'Node)', 'void'),
  \ javaapi#method(0,'setTailSub1(', 'Node)', 'void'),
  \ javaapi#method(0,'peepTail(', ')', 'Node'),
  \ javaapi#method(0,'peepTailSub1(', ')', 'Node'),
  \ javaapi#method(0,'insertElementAt(', 'Node, int)', 'void'),
  \ javaapi#method(0,'appendNodes(', 'NodeSet)', 'void'),
  \ javaapi#method(0,'removeAllElements(', ')', 'void'),
  \ javaapi#method(0,'removeElement(', 'Node)', 'boolean'),
  \ javaapi#method(0,'removeElementAt(', 'int)', 'void'),
  \ javaapi#method(0,'setElementAt(', 'Node, int)', 'void'),
  \ javaapi#method(0,'elementAt(', 'int)', 'Node'),
  \ javaapi#method(0,'contains(', 'Node)', 'boolean'),
  \ javaapi#method(0,'indexOf(', 'Node, int)', 'int'),
  \ javaapi#method(0,'indexOf(', 'Node)', 'int'),
  \ ])

call javaapi#class('NodeSetDTM', '', [
  \ javaapi#method(0,'NodeSetDTM(', 'DTMManager)', 'public'),
  \ javaapi#method(0,'NodeSetDTM(', 'int, int, DTMManager)', 'public'),
  \ javaapi#method(0,'NodeSetDTM(', 'NodeSetDTM)', 'public'),
  \ javaapi#method(0,'NodeSetDTM(', 'DTMIterator)', 'public'),
  \ javaapi#method(0,'NodeSetDTM(', 'NodeIterator, XPathContext)', 'public'),
  \ javaapi#method(0,'NodeSetDTM(', 'NodeList, XPathContext)', 'public'),
  \ javaapi#method(0,'NodeSetDTM(', 'int, DTMManager)', 'public'),
  \ javaapi#method(0,'setEnvironment(', 'Object)', 'void'),
  \ javaapi#method(0,'getRoot(', ')', 'int'),
  \ javaapi#method(0,'setRoot(', 'int, Object)', 'void'),
  \ javaapi#method(0,'clone(', ') throws CloneNotSupportedException', 'Object'),
  \ javaapi#method(0,'cloneWithReset(', ') throws CloneNotSupportedException', 'DTMIterator'),
  \ javaapi#method(0,'reset(', ')', 'void'),
  \ javaapi#method(0,'getWhatToShow(', ')', 'int'),
  \ javaapi#method(0,'getFilter(', ')', 'DTMFilter'),
  \ javaapi#method(0,'getExpandEntityReferences(', ')', 'boolean'),
  \ javaapi#method(0,'getDTM(', 'int)', 'DTM'),
  \ javaapi#method(0,'getDTMManager(', ')', 'DTMManager'),
  \ javaapi#method(0,'nextNode(', ')', 'int'),
  \ javaapi#method(0,'previousNode(', ')', 'int'),
  \ javaapi#method(0,'detach(', ')', 'void'),
  \ javaapi#method(0,'allowDetachToRelease(', 'boolean)', 'void'),
  \ javaapi#method(0,'isFresh(', ')', 'boolean'),
  \ javaapi#method(0,'runTo(', 'int)', 'void'),
  \ javaapi#method(0,'item(', 'int)', 'int'),
  \ javaapi#method(0,'getLength(', ')', 'int'),
  \ javaapi#method(0,'addNode(', 'int)', 'void'),
  \ javaapi#method(0,'insertNode(', 'int, int)', 'void'),
  \ javaapi#method(0,'removeNode(', 'int)', 'void'),
  \ javaapi#method(0,'addNodes(', 'DTMIterator)', 'void'),
  \ javaapi#method(0,'addNodesInDocOrder(', 'DTMIterator, XPathContext)', 'void'),
  \ javaapi#method(0,'addNodeInDocOrder(', 'int, boolean, XPathContext)', 'int'),
  \ javaapi#method(0,'addNodeInDocOrder(', 'int, XPathContext)', 'int'),
  \ javaapi#method(0,'size(', ')', 'int'),
  \ javaapi#method(0,'addElement(', 'int)', 'void'),
  \ javaapi#method(0,'insertElementAt(', 'int, int)', 'void'),
  \ javaapi#method(0,'appendNodes(', 'NodeVector)', 'void'),
  \ javaapi#method(0,'removeAllElements(', ')', 'void'),
  \ javaapi#method(0,'removeElement(', 'int)', 'boolean'),
  \ javaapi#method(0,'removeElementAt(', 'int)', 'void'),
  \ javaapi#method(0,'setElementAt(', 'int, int)', 'void'),
  \ javaapi#method(0,'setItem(', 'int, int)', 'void'),
  \ javaapi#method(0,'elementAt(', 'int)', 'int'),
  \ javaapi#method(0,'contains(', 'int)', 'boolean'),
  \ javaapi#method(0,'indexOf(', 'int, int)', 'int'),
  \ javaapi#method(0,'indexOf(', 'int)', 'int'),
  \ javaapi#method(0,'getCurrentPos(', ')', 'int'),
  \ javaapi#method(0,'setCurrentPos(', 'int)', 'void'),
  \ javaapi#method(0,'getCurrentNode(', ')', 'int'),
  \ javaapi#method(0,'getShouldCacheNodes(', ')', 'boolean'),
  \ javaapi#method(0,'setShouldCacheNodes(', 'boolean)', 'void'),
  \ javaapi#method(0,'isMutable(', ')', 'boolean'),
  \ javaapi#method(0,'getLast(', ')', 'int'),
  \ javaapi#method(0,'setLast(', 'int)', 'void'),
  \ javaapi#method(0,'isDocOrdered(', ')', 'boolean'),
  \ javaapi#method(0,'getAxis(', ')', 'int'),
  \ ])

call javaapi#class('SourceTree', '', [
  \ javaapi#field(0,'m_url', 'String'),
  \ javaapi#field(0,'m_root', 'int'),
  \ javaapi#method(0,'SourceTree(', 'int, String)', 'public'),
  \ ])

call javaapi#class('SourceTreeManager', '', [
  \ javaapi#method(0,'SourceTreeManager(', ')', 'public'),
  \ javaapi#method(0,'reset(', ')', 'void'),
  \ javaapi#method(0,'setURIResolver(', 'URIResolver)', 'void'),
  \ javaapi#method(0,'getURIResolver(', ')', 'URIResolver'),
  \ javaapi#method(0,'findURIFromDoc(', 'int)', 'String'),
  \ javaapi#method(0,'resolveURI(', 'String, String, SourceLocator) throws TransformerException, IOException', 'Source'),
  \ javaapi#method(0,'removeDocumentFromCache(', 'int)', 'void'),
  \ javaapi#method(0,'putDocumentInCache(', 'int, Source)', 'void'),
  \ javaapi#method(0,'getNode(', 'Source)', 'int'),
  \ javaapi#method(0,'getSourceTree(', 'String, String, SourceLocator, XPathContext) throws TransformerException', 'int'),
  \ javaapi#method(0,'getSourceTree(', 'Source, SourceLocator, XPathContext) throws TransformerException', 'int'),
  \ javaapi#method(0,'parseToNode(', 'Source, SourceLocator, XPathContext) throws TransformerException', 'int'),
  \ javaapi#method(1,'getXMLReader(', 'Source, SourceLocator) throws TransformerException', 'XMLReader'),
  \ ])

call javaapi#class('VariableStack', 'Cloneable', [
  \ javaapi#field(1,'CLEARLIMITATION', 'int'),
  \ javaapi#method(0,'VariableStack(', ')', 'public'),
  \ javaapi#method(0,'clone(', ') throws CloneNotSupportedException', 'Object'),
  \ javaapi#method(0,'elementAt(', 'int)', 'XObject'),
  \ javaapi#method(0,'size(', ')', 'int'),
  \ javaapi#method(0,'reset(', ')', 'void'),
  \ javaapi#method(0,'setStackFrame(', 'int)', 'void'),
  \ javaapi#method(0,'getStackFrame(', ')', 'int'),
  \ javaapi#method(0,'link(', 'int)', 'int'),
  \ javaapi#method(0,'unlink(', ')', 'void'),
  \ javaapi#method(0,'unlink(', 'int)', 'void'),
  \ javaapi#method(0,'setLocalVariable(', 'int, XObject)', 'void'),
  \ javaapi#method(0,'setLocalVariable(', 'int, XObject, int)', 'void'),
  \ javaapi#method(0,'getLocalVariable(', 'XPathContext, int) throws TransformerException', 'XObject'),
  \ javaapi#method(0,'getLocalVariable(', 'int, int) throws TransformerException', 'XObject'),
  \ javaapi#method(0,'getLocalVariable(', 'XPathContext, int, boolean) throws TransformerException', 'XObject'),
  \ javaapi#method(0,'isLocalSet(', 'int) throws TransformerException', 'boolean'),
  \ javaapi#method(0,'clearLocalSlots(', 'int, int)', 'void'),
  \ javaapi#method(0,'setGlobalVariable(', 'int, XObject)', 'void'),
  \ javaapi#method(0,'getGlobalVariable(', 'XPathContext, int) throws TransformerException', 'XObject'),
  \ javaapi#method(0,'getGlobalVariable(', 'XPathContext, int, boolean) throws TransformerException', 'XObject'),
  \ javaapi#method(0,'getVariableOrParam(', 'XPathContext, QName) throws TransformerException', 'XObject'),
  \ ])

call javaapi#interface('WhitespaceStrippingElementMatcher', '', [
  \ javaapi#method(0,'shouldStripWhiteSpace(', 'XPathContext, Element) throws TransformerException', 'boolean'),
  \ javaapi#method(0,'canStripWhiteSpace(', ')', 'boolean'),
  \ ])

call javaapi#class('XPath', 'ExpressionOwner', [
  \ javaapi#field(1,'SELECT', 'int'),
  \ javaapi#field(1,'MATCH', 'int'),
  \ javaapi#field(1,'MATCH_SCORE_NONE', 'double'),
  \ javaapi#field(1,'MATCH_SCORE_QNAME', 'double'),
  \ javaapi#field(1,'MATCH_SCORE_NSWILD', 'double'),
  \ javaapi#field(1,'MATCH_SCORE_NODETEST', 'double'),
  \ javaapi#field(1,'MATCH_SCORE_OTHER', 'double'),
  \ javaapi#method(0,'getExpression(', ')', 'Expression'),
  \ javaapi#method(0,'fixupVariables(', 'Vector, int)', 'void'),
  \ javaapi#method(0,'setExpression(', 'Expression)', 'void'),
  \ javaapi#method(0,'getLocator(', ')', 'SourceLocator'),
  \ javaapi#method(0,'getPatternString(', ')', 'String'),
  \ javaapi#method(0,'XPath(', 'String, SourceLocator, PrefixResolver, int, ErrorListener) throws TransformerException', 'public'),
  \ javaapi#method(0,'XPath(', 'String, SourceLocator, PrefixResolver, int, ErrorListener, FunctionTable) throws TransformerException', 'public'),
  \ javaapi#method(0,'XPath(', 'String, SourceLocator, PrefixResolver, int) throws TransformerException', 'public'),
  \ javaapi#method(0,'XPath(', 'Expression)', 'public'),
  \ javaapi#method(0,'execute(', 'XPathContext, Node, PrefixResolver) throws TransformerException', 'XObject'),
  \ javaapi#method(0,'execute(', 'XPathContext, int, PrefixResolver) throws TransformerException', 'XObject'),
  \ javaapi#method(0,'bool(', 'XPathContext, int, PrefixResolver) throws TransformerException', 'boolean'),
  \ javaapi#method(0,'getMatchScore(', 'XPathContext, int) throws TransformerException', 'double'),
  \ javaapi#method(0,'warn(', 'XPathContext, int, String, Object[]) throws TransformerException', 'void'),
  \ javaapi#method(0,'assertion(', 'boolean, String)', 'void'),
  \ javaapi#method(0,'error(', 'XPathContext, int, String, Object[]) throws TransformerException', 'void'),
  \ javaapi#method(0,'callVisitors(', 'ExpressionOwner, XPathVisitor)', 'void'),
  \ ])

call javaapi#class('XPathAPI', '', [
  \ javaapi#method(0,'XPathAPI(', ')', 'public'),
  \ javaapi#method(1,'selectSingleNode(', 'Node, String) throws TransformerException', 'Node'),
  \ javaapi#method(1,'selectSingleNode(', 'Node, String, Node) throws TransformerException', 'Node'),
  \ javaapi#method(1,'selectNodeIterator(', 'Node, String) throws TransformerException', 'NodeIterator'),
  \ javaapi#method(1,'selectNodeIterator(', 'Node, String, Node) throws TransformerException', 'NodeIterator'),
  \ javaapi#method(1,'selectNodeList(', 'Node, String) throws TransformerException', 'NodeList'),
  \ javaapi#method(1,'selectNodeList(', 'Node, String, Node) throws TransformerException', 'NodeList'),
  \ javaapi#method(1,'eval(', 'Node, String) throws TransformerException', 'XObject'),
  \ javaapi#method(1,'eval(', 'Node, String, Node) throws TransformerException', 'XObject'),
  \ javaapi#method(1,'eval(', 'Node, String, PrefixResolver) throws TransformerException', 'XObject'),
  \ ])

call javaapi#class('XPathExpressionContext', 'ExpressionContext', [
  \ javaapi#method(0,'XPathExpressionContext(', 'XPathContext)', 'public'),
  \ javaapi#method(0,'getXPathContext(', ')', 'XPathContext'),
  \ javaapi#method(0,'getDTMManager(', ')', 'DTMManager'),
  \ javaapi#method(0,'getContextNode(', ')', 'Node'),
  \ javaapi#method(0,'getContextNodes(', ')', 'NodeIterator'),
  \ javaapi#method(0,'getErrorListener(', ')', 'ErrorListener'),
  \ javaapi#method(0,'toNumber(', 'Node)', 'double'),
  \ javaapi#method(0,'toString(', 'Node)', 'String'),
  \ javaapi#method(0,'getVariableOrParam(', 'QName) throws TransformerException', 'XObject'),
  \ ])

call javaapi#class('XPathContext', '', [
  \ javaapi#field(0,'m_primaryReader', 'XMLReader'),
  \ javaapi#field(1,'RECURSIONLIMIT', 'int'),
  \ javaapi#method(0,'getDTMManager(', ')', 'DTMManager'),
  \ javaapi#method(0,'setSecureProcessing(', 'boolean)', 'void'),
  \ javaapi#method(0,'isSecureProcessing(', ')', 'boolean'),
  \ javaapi#method(0,'getDTM(', 'Source, boolean, DTMWSFilter, boolean, boolean)', 'DTM'),
  \ javaapi#method(0,'getDTM(', 'int)', 'DTM'),
  \ javaapi#method(0,'getDTMHandleFromNode(', 'Node)', 'int'),
  \ javaapi#method(0,'getDTMIdentity(', 'DTM)', 'int'),
  \ javaapi#method(0,'createDocumentFragment(', ')', 'DTM'),
  \ javaapi#method(0,'release(', 'DTM, boolean)', 'boolean'),
  \ javaapi#method(0,'createDTMIterator(', 'Object, int)', 'DTMIterator'),
  \ javaapi#method(0,'createDTMIterator(', 'String, PrefixResolver)', 'DTMIterator'),
  \ javaapi#method(0,'createDTMIterator(', 'int, DTMFilter, boolean)', 'DTMIterator'),
  \ javaapi#method(0,'createDTMIterator(', 'int)', 'DTMIterator'),
  \ javaapi#method(0,'XPathContext(', ')', 'public'),
  \ javaapi#method(0,'XPathContext(', 'Object)', 'public'),
  \ javaapi#method(0,'reset(', ')', 'void'),
  \ javaapi#method(0,'setSAXLocator(', 'SourceLocator)', 'void'),
  \ javaapi#method(0,'pushSAXLocator(', 'SourceLocator)', 'void'),
  \ javaapi#method(0,'pushSAXLocatorNull(', ')', 'void'),
  \ javaapi#method(0,'popSAXLocator(', ')', 'void'),
  \ javaapi#method(0,'getSAXLocator(', ')', 'SourceLocator'),
  \ javaapi#method(0,'getOwnerObject(', ')', 'Object'),
  \ javaapi#method(0,'getVarStack(', ')', 'VariableStack'),
  \ javaapi#method(0,'setVarStack(', 'VariableStack)', 'void'),
  \ javaapi#method(0,'getSourceTreeManager(', ')', 'SourceTreeManager'),
  \ javaapi#method(0,'setSourceTreeManager(', 'SourceTreeManager)', 'void'),
  \ javaapi#method(0,'getErrorListener(', ')', 'ErrorListener'),
  \ javaapi#method(0,'setErrorListener(', 'ErrorListener) throws IllegalArgumentException', 'void'),
  \ javaapi#method(0,'getURIResolver(', ')', 'URIResolver'),
  \ javaapi#method(0,'setURIResolver(', 'URIResolver)', 'void'),
  \ javaapi#method(0,'getPrimaryReader(', ')', 'XMLReader'),
  \ javaapi#method(0,'setPrimaryReader(', 'XMLReader)', 'void'),
  \ javaapi#method(0,'getContextNodeListsStack(', ')', 'Stack'),
  \ javaapi#method(0,'setContextNodeListsStack(', 'Stack)', 'void'),
  \ javaapi#method(0,'getContextNodeList(', ')', 'DTMIterator'),
  \ javaapi#method(0,'pushContextNodeList(', 'DTMIterator)', 'void'),
  \ javaapi#method(0,'popContextNodeList(', ')', 'void'),
  \ javaapi#method(0,'getCurrentNodeStack(', ')', 'IntStack'),
  \ javaapi#method(0,'setCurrentNodeStack(', 'IntStack)', 'void'),
  \ javaapi#method(0,'getCurrentNode(', ')', 'int'),
  \ javaapi#method(0,'pushCurrentNodeAndExpression(', 'int, int)', 'void'),
  \ javaapi#method(0,'popCurrentNodeAndExpression(', ')', 'void'),
  \ javaapi#method(0,'pushExpressionState(', 'int, int, PrefixResolver)', 'void'),
  \ javaapi#method(0,'popExpressionState(', ')', 'void'),
  \ javaapi#method(0,'pushCurrentNode(', 'int)', 'void'),
  \ javaapi#method(0,'popCurrentNode(', ')', 'void'),
  \ javaapi#method(0,'pushPredicateRoot(', 'int)', 'void'),
  \ javaapi#method(0,'popPredicateRoot(', ')', 'void'),
  \ javaapi#method(0,'getPredicateRoot(', ')', 'int'),
  \ javaapi#method(0,'pushIteratorRoot(', 'int)', 'void'),
  \ javaapi#method(0,'popIteratorRoot(', ')', 'void'),
  \ javaapi#method(0,'getIteratorRoot(', ')', 'int'),
  \ javaapi#method(0,'getCurrentExpressionNodeStack(', ')', 'IntStack'),
  \ javaapi#method(0,'setCurrentExpressionNodeStack(', 'IntStack)', 'void'),
  \ javaapi#method(0,'getPredicatePos(', ')', 'int'),
  \ javaapi#method(0,'pushPredicatePos(', 'int)', 'void'),
  \ javaapi#method(0,'popPredicatePos(', ')', 'void'),
  \ javaapi#method(0,'getCurrentExpressionNode(', ')', 'int'),
  \ javaapi#method(0,'pushCurrentExpressionNode(', 'int)', 'void'),
  \ javaapi#method(0,'popCurrentExpressionNode(', ')', 'void'),
  \ javaapi#method(0,'getNamespaceContext(', ')', 'PrefixResolver'),
  \ javaapi#method(0,'setNamespaceContext(', 'PrefixResolver)', 'void'),
  \ javaapi#method(0,'pushNamespaceContext(', 'PrefixResolver)', 'void'),
  \ javaapi#method(0,'pushNamespaceContextNull(', ')', 'void'),
  \ javaapi#method(0,'popNamespaceContext(', ')', 'void'),
  \ javaapi#method(0,'getAxesIteratorStackStacks(', ')', 'Stack'),
  \ javaapi#method(0,'setAxesIteratorStackStacks(', 'Stack)', 'void'),
  \ javaapi#method(0,'pushSubContextList(', 'SubContextList)', 'void'),
  \ javaapi#method(0,'popSubContextList(', ')', 'void'),
  \ javaapi#method(0,'getSubContextList(', ')', 'SubContextList'),
  \ javaapi#method(0,'getCurrentNodeList(', ')', 'SubContextList'),
  \ javaapi#method(0,'getContextNode(', ')', 'int'),
  \ javaapi#method(0,'getContextNodes(', ')', 'DTMIterator'),
  \ javaapi#method(0,'getExpressionContext(', ')', 'ExpressionContext'),
  \ javaapi#method(0,'getGlobalRTFDTM(', ')', 'DTM'),
  \ javaapi#method(0,'getRTFDTM(', ')', 'DTM'),
  \ javaapi#method(0,'pushRTFContext(', ')', 'void'),
  \ javaapi#method(0,'popRTFContext(', ')', 'void'),
  \ javaapi#method(0,'getDTMXRTreeFrag(', 'int)', 'DTMXRTreeFrag'),
  \ ])

call javaapi#class('XPathException', '', [
  \ javaapi#method(0,'getStylesheetNode(', ')', 'Object'),
  \ javaapi#method(0,'setStylesheetNode(', 'Object)', 'void'),
  \ javaapi#method(0,'XPathException(', 'String, ExpressionNode)', 'public'),
  \ javaapi#method(0,'XPathException(', 'String)', 'public'),
  \ javaapi#method(0,'getStylesheetNode(', 'ExpressionNode)', 'Node'),
  \ javaapi#method(0,'XPathException(', 'String, Object)', 'public'),
  \ javaapi#method(0,'XPathException(', 'String, Node, Exception)', 'public'),
  \ javaapi#method(0,'XPathException(', 'String, Exception)', 'public'),
  \ javaapi#method(0,'printStackTrace(', 'PrintStream)', 'void'),
  \ javaapi#method(0,'getMessage(', ')', 'String'),
  \ javaapi#method(0,'printStackTrace(', 'PrintWriter)', 'void'),
  \ javaapi#method(0,'getException(', ')', 'Throwable'),
  \ ])

call javaapi#interface('XPathFactory', '', [
  \ javaapi#method(0,'create(', 'String, SourceLocator, PrefixResolver, int)', 'XPath'),
  \ ])

call javaapi#class('XPathProcessorException', '', [
  \ javaapi#method(0,'XPathProcessorException(', 'String)', 'public'),
  \ javaapi#method(0,'XPathProcessorException(', 'String, Exception)', 'public'),
  \ ])

call javaapi#interface('XPathVisitable', '', [
  \ javaapi#method(0,'callVisitors(', 'ExpressionOwner, XPathVisitor)', 'void'),
  \ ])

call javaapi#class('XPathVisitor', '', [
  \ javaapi#method(0,'XPathVisitor(', ')', 'public'),
  \ javaapi#method(0,'visitLocationPath(', 'ExpressionOwner, LocPathIterator)', 'boolean'),
  \ javaapi#method(0,'visitUnionPath(', 'ExpressionOwner, UnionPathIterator)', 'boolean'),
  \ javaapi#method(0,'visitStep(', 'ExpressionOwner, NodeTest)', 'boolean'),
  \ javaapi#method(0,'visitPredicate(', 'ExpressionOwner, Expression)', 'boolean'),
  \ javaapi#method(0,'visitBinaryOperation(', 'ExpressionOwner, Operation)', 'boolean'),
  \ javaapi#method(0,'visitUnaryOperation(', 'ExpressionOwner, UnaryOperation)', 'boolean'),
  \ javaapi#method(0,'visitVariableRef(', 'ExpressionOwner, Variable)', 'boolean'),
  \ javaapi#method(0,'visitFunction(', 'ExpressionOwner, Function)', 'boolean'),
  \ javaapi#method(0,'visitMatchPattern(', 'ExpressionOwner, StepPattern)', 'boolean'),
  \ javaapi#method(0,'visitUnionPattern(', 'ExpressionOwner, UnionPattern)', 'boolean'),
  \ javaapi#method(0,'visitStringLiteral(', 'ExpressionOwner, XString)', 'boolean'),
  \ javaapi#method(0,'visitNumberLiteral(', 'ExpressionOwner, XNumber)', 'boolean'),
  \ ])

